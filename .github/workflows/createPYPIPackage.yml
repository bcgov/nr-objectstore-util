name: Build PYPI Package

# trigger on any push to test
# on:
#   push:
#     branches: ['main', 'feat/pypi-packaging']

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    branches: ['main']
    paths-ignore:
      - 'README.md'
      - 'tests/*'
      - 'examples/*'
      - '.vscode/*'
      - '.gitignore'
      - 'COMPLIANCE.yaml'
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Runs a single command using the runners shell
    #   sudo apt-get install jq
    - name: install build requirements
      run: |
        # sudo apt-get install python3-setuptools
        python3 -m pip install --upgrade pip
        python3 -m pip install -r requirements-dev.txt
    # Runs a set of commands using the runners shell

    # Runs a set of commands using the runners shell
    - name: Run xenon code quality check
      run: |
        xenontestsuccess=false
        xenonout=$(xenon --max-absolute B --max-modules A --max-average A $GITHUB_WORKSPACE  2>&1)
        if [ -z "$xenonout" ]
        then
          xenontestsuccess=true
        fi

    - name: Build Pypi Package
      if: success()
      env:
        TWINE_USERNAME:  ${{ secrets.TWINE_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        PKG_TYPE: PROD
        GH_TOKEN: ${{ github.token }}
      run: |
        # checkout the pr
        gh pr checkout ${{ github.event.pull_request.number }}

        # get the current version,
        # compare w/ pypi version
        # new version is pypi version + 1 unless current version is set
        #    correctly
        # -----------------------------------------------------------------
        cur_local_ver=$(hatch version)
        next_ver=$(python3 util/getNextVersion.py $cur_local_ver)
        echo next version is $next_ver
        # set it
        hatch version $next_ver

        # git config --global user.name 'github-actions[bot]'
        # git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        # git add src/NRUtil/__about__.py
        # git tag $VERSION
        # git commit -m "Bump version: $VERSION â†’ $NEW_VERSION"

        python3 -m build
        python3 -m twine upload dist/*

        # git push
        # git push --tags

    # notes on publication / autoversioning: https://waylonwalker.com/hatch-version/